{"version":3,"file":"hljsl.min.js","sources":["../src/hljsl.js"],"sourcesContent":["/* eslint-disable no-param-reassign */\nclass HighlightLite {\n\n    #autoLoad = true;\n\n    #hideNumbers = false;\n\n    #lang = 'en-us';\n\n    #lazyLoad = true;\n\n    #root = '';\n\n    #worker = null;\n\n    #version = '1.0.0';\n\n    constructor() {\n        this.#initialize();\n        this.#lang = this.getUserLanguage();\n        this.#processBlocks();\n    }\n\n    /**\n     * Watch a block for intersection events and when it appears to be coming up\n     * in the viewport (or already showing), process the block. This is used to\n     * lazy process (load) code blocks.\n     *\n     * @param {Array} entries An array of observed events that have triggered this function.\n     * @param {IntersectionObserver} observer The observer watching this element/event.\n     */\n    #blockInView(entries, observer) {\n        entries.forEach((entry) => {\n            if (entry.isIntersecting) {\n                observer.disconnect(); // Block is about to be processed so stop watching it.\n                this.highlight(entry.target);\n            }\n        });\n    }\n\n    /**\n     * Create a unique id.\n     *\n     * @returns {string} A generally unique id.\n     */\n    createId() {\n        return `${Date.now().toString(36)}${Math.random().toString(36).substring(2)}`.toUpperCase();\n    }\n\n    /**\n     * Connect to HLJSL's web worker.\n     *\n     * @returns {void} Used as a short circuit only.\n     */\n    connect() {\n        if (this.#worker) {\n            return;\n        }\n        const worker = new Worker(`${this.#root}/hljsl-worker.min.js`);\n        worker.onmessage = this.#receiveResponse.bind(this);\n        this.#worker = worker;\n    }\n\n    /**\n     * Copy code from a block to the users clipboard.\n     *\n     * @param {HTMLElement} button The copy to clipboard button that was pressed.\n     * @returns {void} Used as a short circuit.\n     */\n    copyToClipboard(button) {\n        const table = button.nextElementSibling;\n        if (table.nodeName !== 'TABLE') { return; }\n        // Visually show the table is being copied.\n        button.ariaPressed = true;\n        table.classList.add('copy-to-clipboard');\n        // Actually copy the table to the users clipboard:\n        const cells = table.querySelectorAll('tr td:nth-child(2)');\n        // Copy data to a temporary div.\n        const tmpDiv = document.createElement('div');\n        cells.forEach((cell) => {\n            tmpDiv.textContent += `${cell.textContent}\\n`;\n        });\n        // Copy the text from the temporary div to the clipboard using the Clipboard API.\n        navigator.clipboard.writeText(tmpDiv.textContent.trimEnd())\n            .catch((error) => {\n                console.error('Failed to copy text to clipboard:', error);\n            });\n        // Remove the visual effect.\n        setTimeout(() => {\n            table.classList.remove('copy-to-clipboard');\n            button.ariaPressed = false;\n        }, 500);\n    }\n\n    /**\n     * Correct the padding of code blocks.\n     *\n     * @param {HTMLElement} elem The code element to process.\n     */\n    async #correctPadding(elem) {\n        // We must ignore any empty lines until actual code is encountered.\n        let indentation = 0;\n        let doIndentation = true;\n        // Break the code into their lines for processing.\n        const lines = elem.innerText.split('\\n');\n        // Process each line.\n        lines.forEach((line, i) => {\n            // If we still haven't figured out indentation keep checking.\n            if (indentation === 0 && doIndentation) {\n                if (line.length !== 0) {\n                    /**\n                     * This line has code which indicates the unnecessary indentation\n                     * that HLJSL removes to left align the code perfectly.\n                     */\n                    const match = line.match(/^\\s+/);\n                    indentation = match ? match[0].length : 0;\n                    doIndentation = false;\n                }\n            }\n            // Remove the unnecessary indentation (padding) at the start of each line.\n            lines[i] = line.substring(indentation);\n        });\n        // Make the replacement in the DOM any extra empty new line at the end.\n        elem.innerText = lines.join('\\n').trimEnd();\n    }\n\n    /**\n     * Disconnect from HLJSL's web worker.\n     *\n     * @returns {void} Used as a short circuit.\n     */\n    disconnect() {\n        if (!this.#worker) {\n            return;\n        }\n        this.#worker.terminate();\n        this.#worker = null;\n    }\n\n    async #ensureBaseStyles() {\n        const stylesheets = document.styleSheets;\n        for (let i = 0; i < stylesheets.length; i++) {\n            const { href } = stylesheets[i];\n            if (href.includes('/hljsl')) {\n                return;\n            }\n        }\n        const link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.href = `${this.#root}/hljsl.min.css`;\n        document.head.appendChild(link);\n    }\n\n    /**\n     * Detect what language the user is viewing the page in.\n     *\n     * @returns {string} The users valid BCP 47 language code.\n     */\n    getUserLanguage() {\n        // Start with the browsers language setting.\n        let userLanguage = navigator.language || navigator.userLanguage;\n        // Check if lang attribute is set in the HTML tag.\n        const htmlLang = document.documentElement.lang;\n        if (htmlLang) {\n            // Check if the lang attribute is a valid BCP 47 language tag.\n            const langRegex = /^[a-zA-Z]{2}(-[a-zA-Z]{2})?$/;\n            if (langRegex.test(htmlLang)) {\n                // Use the language that the developer set instead.\n                userLanguage = htmlLang;\n            }\n        }\n        return userLanguage;\n    }\n\n    /**\n     * Share the version of HLJSL being used.\n     *\n     * @returns  {string} The current version on HLJSL.\n     */\n    getVersion() {\n        return this.#version;\n    }\n\n    /**\n     * Highlight a code element with HLJS using the HLJSL web worker.\n     *\n     * @param {HTMLElement} elem The code element to highlight.\n     */\n    highlight(elem) {\n        // If the web worker is not connected do so now.\n        if (!this.isConnected()) {\n            /**\n             * NOTE: We do not connect automatically in case this page doesn't\n             * have any code blocks to highlight.\n             */\n            this.connect();\n        }\n        // Do not waste time reprocessing a block.\n        if (elem.hasAttribute('hljsl-id')) { return; }\n        /**\n         * This should have been added already but a deferred code block that the\n         * user wants to manually process will be missing this.\n         */\n        elem.parentElement.classList.add('hljs');\n        // eslint-disable-next-line no-param-reassign\n        elem.dataset.hljslId = this.createId();\n        const msg = {\n            code: elem.innerText,\n            codeLang: elem.classList.toString(),\n            id: elem.dataset.hljslId,\n            pageLang: this.#lang,\n            root: this.#root\n        };\n        // Message the web worker.\n        this.#worker.postMessage(JSON.stringify(msg));\n    }\n\n    /**\n     * Process all code blocks found within the provided container (element).\n     *\n     * @param {HTMLElement} container The code element to highlight.\n     */\n    highlightAll(container) {\n        // eslint-disable-next-line no-param-reassign\n        if (!container) { container = document; }\n        // Find all the code blocks in this element.\n        const codeBlocks = container.querySelectorAll('pre code');\n        codeBlocks.forEach((block) => {\n            // Process each code block found.\n            this.highlight(block);\n        });\n    }\n\n    /**\n     * Initializes HLJSL by determining its root location and checking for various options (settings).\n     */\n    #initialize() {\n        // Determine the root (directory) location of HLJSL.\n        this.#root = window?.location?.origin;\n        let hljsScriptSrc = '';\n        const scripts = document.getElementsByTagName('script');\n        for (let i = 0; i < scripts.length; i++) {\n            const { src } = scripts[i];\n            if (src.includes('/hljsl')) {\n                if (src.indexOf('?')) {\n                    hljsScriptSrc = src.substring(src.indexOf('?'));\n                }\n                this.#root = src.substring(0, src.indexOf('/hljsl'));\n                break;\n            }\n        }\n        // Check for and configure various options (settings).\n        const urlParams = new URLSearchParams(hljsScriptSrc);\n        if (urlParams.get('autoLoad')) {\n            this.#autoLoad = this.isTrue(urlParams.get('autoLoad'));\n        }\n        if (urlParams.get('hideNumbers')) {\n            this.#hideNumbers = this.isTrue(urlParams.get('hideNumbers'));\n        }\n        if (urlParams.get('lazyLoad')) {\n            this.#lazyLoad = this.isTrue(urlParams.get('lazyLoad'));\n        }\n    }\n\n    /**\n     * Check if HLJSL's Web worker is connected.\n     *\n     * @returns {boolean} Boolean indicating the web worker connection state; true is connected.\n     */\n    isConnected() {\n        return !(this.#worker === null);\n    }\n\n    /**\n     * Convert a string representing a boolean into an actual boolean.\n     *\n     * @param {string} str The string to convert to the correct boolean value.\n     * @returns\n     */\n    isTrue(str) {\n        if (typeof (str) === 'string') {\n            str = str.trim().toLowerCase();\n        }\n        switch (str) {\n            case true:\n            case 'true':\n            case 1:\n            case '1':\n            case 'on':\n            case 'yes':\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * Using a mutation observer watch for pre code blocks being added to the page\n     * and immediately start to process them.\n     */\n    #processBlocks() {\n        const bodyObserver = new MutationObserver((mutationList, observer) => {\n            for (let i = 0; i < mutationList.length; i++) {\n                const mutation = mutationList[i];\n                // Do no process unnecessary events; this may be unnecessary.\n                if (mutation.type !== 'childList') {\n                    return;\n                }\n                // Skip all elements that are not the body.\n                if (mutation.target.nodeName !== 'BODY') {\n                    return;\n                }\n                /**\n                 * Body element has been added to the DOM so search it and process\n                 * all the code blocks found inside it.\n                 */\n                this.#ensureBaseStyles();\n                const blocks = mutation.target.querySelectorAll('pre code');\n                blocks.forEach(async (block) => {\n                    block.parentElement.classList.add('hljs');\n                    // Before fixing the padding check if we need to hide line numbers.\n                    if (this.#hideNumbers) {\n                        block.classList.add('hide-numbers');\n                    }\n                    await this.#correctPadding(block);\n                    // Stop processing if autoLoad is false; we only fix the padding and spacing.\n                    if (!this.#autoLoad) { return; }\n                    // Process blocks now or lazy load them?\n                    if (!this.#lazyLoad) {\n                        // Process blocks now.\n                        this.highlight(block);\n                        return;\n                    }\n                    // Lazy load blocks instead; recommended for pages with many code blocks.\n                    const blockObserverOptions = {\n                        root: null,\n                        rootMargin: '100%',\n                        threshold: 0\n                    };\n                    const blockObserver = new IntersectionObserver(\n                        this.#blockInView.bind(this),\n                        blockObserverOptions\n                    );\n                    blockObserver.observe(block);\n                });\n                /**\n                 * Stop the observer to reduce resource use on this page. If any\n                 * code blocks are added later the user will need to manually\n                 * call the `highlight` or `highlightAll` methods.\n                 */\n                observer.disconnect();\n            }\n        });\n        // Start the observer.\n        bodyObserver.observe(document.documentElement, { childList: true, subtree: true });\n    }\n\n    /**\n     * Receives the response from HLJSL's web worker.\n     *\n     * @param {MessageEvent} evt The response from HLJSL's web worker.\n     */\n    #receiveResponse(evt) {\n        const msg = JSON.parse(evt.data);\n        // Using the elements id to locate the actual element.\n        const elem = document.querySelector(`[data-hljsl-id=\"${msg.id}\"]`);\n        // Clean the response just in case an empty newline snuck in at the end.\n        elem.innerHTML = msg.code.trim();\n        // Place the code block on the same line as the pre block to remove those empty lines.\n        elem.parentElement.innerHTML = elem.outerHTML.trim();\n        /**\n         * Make sure the code block has a HLJS language tag. If it already does then this should be\n         * the same that was used during the processing. If you were missing the language tag this\n         * will be the language HLJS detected this code to be.\n         */\n        elem.classList.add(msg.language);\n    }\n\n}\n\nconst hljsl = new HighlightLite();\n\n// Rollup will create an iife and we want only some methods to be publicly accessible.\nexport default hljsl;\n"],"names":["autoLoad","hideNumbers","lang","lazyLoad","root","worker","version","constructor","this","initialize","getUserLanguage","processBlocks","blockInView","entries","observer","forEach","entry","isIntersecting","disconnect","highlight","target","createId","Date","now","toString","Math","random","substring","toUpperCase","connect","Worker","onmessage","receiveResponse","bind","copyToClipboard","button","table","nextElementSibling","nodeName","ariaPressed","classList","add","cells","querySelectorAll","tmpDiv","document","createElement","cell","textContent","navigator","clipboard","writeText","trimEnd","catch","error","console","setTimeout","remove","async","elem","indentation","doIndentation","lines","innerText","split","line","i","length","match","join","terminate","stylesheets","styleSheets","href","includes","link","rel","head","appendChild","userLanguage","language","htmlLang","documentElement","test","getVersion","isConnected","hasAttribute","parentElement","dataset","hljslId","msg","code","codeLang","id","pageLang","postMessage","JSON","stringify","highlightAll","container","block","window","location","origin","hljsScriptSrc","scripts","getElementsByTagName","src","indexOf","urlParams","URLSearchParams","get","isTrue","str","trim","toLowerCase","MutationObserver","mutationList","mutation","type","ensureBaseStyles","correctPadding","IntersectionObserver","rootMargin","threshold","observe","childList","subtree","evt","parse","data","querySelector","innerHTML","outerHTML"],"mappings":"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"}